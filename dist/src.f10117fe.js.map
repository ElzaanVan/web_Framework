{"version":3,"sources":["src/views/UserForm.ts","src/index.ts"],"names":[],"mappings":";;;;;;ACAA,IAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA,EAEA;ADFA,IAAA,QAAA,GAAA,YAAA;AACI,WAAA,QAAA,CACW,MADX,EAC0B;ACC9B,ADDe,ICCT,KDDS,GCCD,GAAG,ADDF,GAAA,CCCM,KDDN,KCCM,CAAA,QAAJ,CAAa,QAAQ,CAAC,cAAT,CAAwB,MAAxB,CAAb,CAAjB;AACA,ADDQ,QCCA,CAAC,MAAT;;ADCI,EAAA,QAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACI,WAAO;AACH,sBAAiB,KAAK;AADnB,KAAP;AAGH,GAJD;;AAMA,EAAA,QAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACI,IAAA,OAAO,CAAC,GAAR,CAAY,SAAZ;AACH,GAFD;;AAIA,EAAA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACI,WAAO,0HAAP;AAOH,GARD;;AAUA,EAAA,QAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,QAAX,EAAqC;AACjC,QAAM,SAAS,GAAG,KAAK,SAAL,EAAlB;;mCAES,UAAQ;AACP,UAAA,EAAA,GAAwB,QAAQ,CAAC,KAAT,CAAe,GAAf,CAAxB;AAAA,UAAC,SAAS,GAAA,EAAA,CAAA,CAAA,CAAV;AAAA,UAAY,QAAQ,GAAA,EAAA,CAAA,CAAA,CAApB;;AAEN,MAAA,QAAQ,CAAC,gBAAT,CAA0B,QAA1B,EAAoC,OAApC,CAA4C,UAAA,EAAA,EAAE;AAC1C,QAAA,EAAE,CAAC,gBAAH,CAAoB,SAApB,EAA+B,SAAS,CAAC,QAAD,CAAxC;AACH,OAFD;;;AAHJ,SAAK,IAAI,QAAT,IAAqB,SAArB,EAA8B;cAArB;AAMR;AACJ,GAVD;;AAYA,EAAA,QAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACI,QAAM,eAAe,GAAG,QAAQ,CAAC,aAAT,CAAuB,UAAvB,CAAxB;AACA,IAAA,eAAe,CAAC,SAAhB,GAA4B,KAAK,QAAL,EAA5B;AACA,SAAK,UAAL,CAAgB,eAAe,CAAC,OAAhC;AACA,SAAK,MAAL,CAAY,MAAZ,CAAmB,eAAe,CAAC,OAAnC;AACH,GALD;;AAMJ,SAAA,QAAA;AA3CA,CAAA,EAAA;;AAAa,OAAA,CAAA,QAAA,GAAA,QAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["export class UserForm {\r\n    constructor(\r\n        public parent: Element\r\n    ) {}\r\n\r\n    eventsMap(): { [key: string]: () => void } {\r\n        return {\r\n            'click:button' : this.onButtonClick\r\n        };\r\n    }\r\n\r\n    onButtonClick(): void {\r\n        console.log(\"Clicked\");\r\n    }\r\n\r\n    template(): string {\r\n        return `\r\n        <div>\r\n        <h1>User Form</h1>\r\n        <input />\r\n        <button>Click</button>\r\n        </div>\r\n        `;\r\n    }\r\n\r\n    bindEvents(fragment: DocumentFragment): void {\r\n        const eventsMap = this.eventsMap();\r\n\r\n        for (let eventKey in eventsMap) {\r\n            const [eventName, selector] = eventKey.split(':');\r\n\r\n            fragment.querySelectorAll(selector).forEach(el => {\r\n                el.addEventListener(eventName, eventsMap[eventKey]);\r\n            });\r\n        }\r\n    }\r\n\r\n    render(): void {\r\n        const templateElement = document.createElement('template');\r\n        templateElement.innerHTML = this.template();\r\n        this.bindEvents(templateElement.content);\r\n        this.parent.append(templateElement.content);\r\n    }\r\n}","import { UserForm } from \"./views/UserForm\";\r\n\r\n// Rendering Userform in HTML\r\nconst userForm = new UserForm(document.getElementById('root'));\r\nuserForm.render();"]}